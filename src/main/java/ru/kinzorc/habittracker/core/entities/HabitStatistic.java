package ru.kinzorc.habittracker.core.entities;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

/**
 * Класс представляет статистику выполнения привычки.
 * <p>
 * Включает данные о стриках (последовательных выполнениях привычки),
 * историю выполнений и информацию о пропусках.
 * Статистика помогает отслеживать, насколько последовательно пользователь выполняет свою привычку.
 * </p>
 */
public class HabitStatistic {

    /**
     * Коллекция для временного хранения стрика по датам.
     * <p>
     * Количество дат в коллекции указывает на количество стриков выполнения.
     * Если пользователь пропускает несколько дней или недель, коллекция сбрасывается,
     * и добавляется новая запись с текущей датой, указывающая, что стрик равен 1.
     * </p>
     * <p>
     * Каждая дата в коллекции представляет день или неделю, когда привычка была успешно выполнена.
     * Непрерывная последовательность дат равняется одному стрику.
     * </p>
     */
    private final Set<LocalDateTime> streaks;
    /**
     * Список дат, когда привычка была выполнена.
     * <p>
     * Хранит все даты выполнения привычки, включая как успешные стрики, так и пропуски.
     * </p>
     */
    private final List<LocalDateTime> executions;
    /**
     * Уникальный идентификатор привычки (ID) для которой создается данный объект статистики.
     */
    private long habitId;

    /**
     * Конструктор для создания объекта статистики привычки.
     * <p>
     * Инициализирует коллекции для хранения стриков и истории выполнений.
     * </p>
     */
    public HabitStatistic() {
        this.streaks = new TreeSet<>();
        this.executions = new ArrayList<>();
    }

    /**
     * Возвращает идентификатор привычки (ID).
     *
     * @return уникальный идентификатор привычки
     */
    public long getHabitId() {
        return habitId;
    }

    /**
     * Устанавливает идентификатор привычки (ID).
     *
     * @param habitId новый идентификатор привычки
     */
    public void setHabitId(long habitId) {
        this.habitId = habitId;
    }

    /**
     * Возвращает коллекцию стриков выполнения привычки.
     * <p>
     * Каждый элемент коллекции представляет день или неделю успешного выполнения привычки.
     * </p>
     *
     * @return коллекция выполнений привычки по датам
     */
    public Set<LocalDateTime> getStreaks() {
        return streaks;
    }

    /**
     * Сбрасывает информацию о стриках выполнения привычки.
     * <p>
     * Очищает коллекцию стриков, удаляя все даты успешных выполнений привычки.
     * </p>
     */
    public void resetStreaks() {
        this.streaks.clear();
    }

    /**
     * Возвращает список всех дат выполнения привычки.
     * <p>
     * Включает как даты успешных выполнений, так и любые даты попыток,
     * даже если привычка была выполнена не регулярно.
     * </p>
     *
     * @return список всех выполнений привычки
     */
    public List<LocalDateTime> getExecutions() {
        return executions;
    }

    /**
     * Сбрасывает список всех выполнений привычки.
     * <p>
     * Полностью очищает историю выполнения привычки.
     * </p>
     */
    public void resetExecutions() {
        this.executions.clear();
    }
}